#顯微鏡物鏡升降偵測工作流擴展計畫：暗房區間專用運動偵測腳本以及資料整併工具


##前言/背景： 本專案目的是自動化紀錄手術中顯微鏡對焦動作產生的運動。擁有一個完整的，基於特徵點與自動分群演算法的運動偵測主程式 ( src\lift_travel_detection.py )，搭配一個半自動人工校正程式

( src\manual_correction_tool.py ) 來應對常見的運動低估問題 ( 半自動人工校正相關訊息也記載於 manual_correction_guide.md )  。 

然而，隨著來源資料增加，原本的偵測程式面臨新的挑戰--暗房狀態：在某些手術紀錄影片中，醫師為了特定原因關閉了房間的主要照明，導致畫面因嚴重照度不足而模糊。即使經過專業影像剪輯軟體增強後，仍然

不足以讓原本的演算法正確偵測。主要的原因似乎來自於特徵點不足，導致匹配出現問題。 經過仔細研究，我們發現經過影像剪輯軟體強化過後的畫面中，仍然有許多高對比的輪廓特徵可供追蹤，只是可能需要重新

設計演算法。  目前演算法會讀取 src\darkroom_intervals.py 然後完全忽略不偵測這些區間的運動。


##需求：1. 一個新的 lift_travel_detection_dark.py 專注於處理 src\darkroom_intervals.py 指定的暗房區間，忽略非暗房區間。 可相容搭配原有人工校正步驟。
        2. 一個數據整合工具，將暗房階段人工校正完成的數據與不含暗房的數據合成新的csv檔
        3. (可選) inspection mp4 整合工具 將原有忽略暗房的inspection 影片中暗房區間替換成新的暗房區間檢閱影片 (整合影片剪輯小工具)


##候選做法 A： 基於與現有演算法類似的特徵點與分群，但在擷取特徵點前，運用邊緣偵測 ( canny ) 確保取得清晰的顯微鏡結構輪廓，並且配合多段式人工ROI圈選，避免不必要的背景混淆。

步驟 1. 使用一個調適腳本測試不同的邊緣偵測與特徵點偵測，找到一個可較穩定產出特徵點的參數

步驟 2. 保留原本src\lift_travel_detection.py 的幀讀取與運動偵測方法，物理運動群集偵測，雜訊排除，以及輸出人工校正用幀等等，並在特徵點取得階段採用步驟一的開發結果。

步驟 3. 處理1~2個暗房區間影片後，使用者觀看inspection mp4 輸出，來確認演算法的有效性

步驟 4. 與人工校正工具進行整合


*建議可複製一份lift_travel_detection.py 命名為lift_travel_detection_dark.py 後對其進行修改，以確保保留所有需要的原始功能*


##候選做法 B : 基於人工校正工具的人工標註與位移計算，為手動校正工具新增影片導航功能。

     步驟1. 製作影片幀導航功能， 讓使用者手動跳轉到運動發生的起點幀 (跳轉到特定秒數以及前進/後退 10幀 和1幀 的微調功能)，讓使用者人工標記
            運動群集前0幀和運動群集後0幀。

     步驟2. 製作功能：逐幀顯示群集前0幀到群集後0幀的每一幀，配合使用者點擊畫面特定伸縮零件 利用SAM模型，取得每幀該零件裸露面積

     步驟3. 製作功能：系統按照該運動群集中每幀的零件面積起伏，來精確分配使用者標註的運動總量ground truth到每一幀當中。

     步驟4. 製作inspection影片匯出功能，需要有文字以及 SAM segmentation area 覆疊 ，以及每幀的運動等必要資訊 (部分比照 src\lift_travel_detection.py)

 
 *建議可複製一份  manual_correction_tool.py ，命名為 manual_travel_detection_dark.py 再開始修改並疊加功能 ，
     其中幀導航的跳轉功能也可以參考 lift_travel_detection_dark.py 裡面讀取並使用 src\config.py 起點時間的功能寫法 *

 *若步驟2開發遇到困難，可跳過步驟2~3 ，直接實現平均運動分配 (以等速運動估計) *


